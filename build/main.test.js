"use strict";
exports.__esModule = true;
var main = require("./main");
var path = require("path");
var callMain = main.callMainFromJest;
if (path.basename(process.cwd()) !== 'src') {
    // Because the second execute of Jest watch mode is inherited the current folder.
    process.chdir('src');
}
test('back slash', function () {
    // CentOS7 sed, mac OS 12 sed
    expect(main.escapeBefore('\\n')).toBe('\\\\\\\\n'); // \n => \\\\n
    expect(main.escapeAfter('\\n')).toBe('\\\\\\\\n'); // \n => \\\\n
});
test('slash', function () {
    // CentOS7 sed, mac OS 12 sed
    expect(main.escapeBefore('a/b/c')).toBe('a\\\\/b\\\\/c'); // a/b/c => a\\/b\\/c
    expect(main.escapeAfter('a/b/c')).toBe('a\\\\/b\\\\/c'); // a/b/c => a\\/b\\/c
});
test('daller', function () {
    // CentOS7 sed, mac OS 12 sed
    expect(main.escapeBefore('$you')).toBe('\\$you'); // $you => \$you
    expect(main.escapeAfter('$me')).toBe('\\$me'); // $me => \$me
});
test('double quotation', function () {
    // CentOS7 sed, mac OS 12 sed
    expect(main.escapeBefore('"a"')).toBe('\\"a\\"'); // " " => \" \"
    expect(main.escapeAfter('"b"')).toBe('\\"b\\"'); // " " => \" \"
});
test('single quotation', function () {
    // CentOS7 sed, mac OS 12 sed
    expect(main.escapeBefore("'a'")).toBe("'a'"); // no change
    expect(main.escapeAfter("'b'")).toBe("'b'"); // no change
});
test('asterisk', function () {
    // CentOS7 sed, mac OS 12 sed
    expect(main.escapeBefore('a*b')).toBe('a\\*b'); // a*b => a\*b
    expect(main.escapeAfter('a*b')).toBe('a*b'); // no change
});
test('question', function () {
    // CentOS7 sed, mac OS 12 sed
    expect(main.escapeBefore('a?b')).toBe('a?b'); // no change
    expect(main.escapeAfter('a?b')).toBe('a?b'); // no change
});
test('plus', function () {
    // CentOS7 sed, mac OS 12 sed
    expect(main.escapeBefore('a+b')).toBe('a+b'); // no change
    expect(main.escapeAfter('a+b')).toBe('a+b'); // no change
});
test('period', function () {
    // CentOS7 sed, mac OS 12 sed
    expect(main.escapeBefore('..a')).toBe('\\\\.\\\\.a'); // . => \\.
    expect(main.escapeAfter('..b')).toBe('..b'); // no change
});
test('caret', function () {
    // CentOS7 sed, mac OS 12 sed
    expect(main.escapeBefore('a^b')).toBe('a\\\\^b'); // ^ => \\^
    expect(main.escapeAfter('a^b')).toBe('a^b'); // no change
});
test('round bracket', function () {
    // CentOS7 sed, mac OS 12 sed
    expect(main.escapeBefore('(a)')).toBe('(a)'); // no change
    expect(main.escapeAfter('(b)')).toBe('(b)'); // no change
});
test('curly brace', function () {
    // CentOS7 sed, mac OS 12 sed
    expect(main.escapeBefore('{a}')).toBe('{a}'); // no change
    expect(main.escapeAfter('{b}')).toBe('{b}'); // no change
});
test('square bracket', function () {
    // CentOS7 sed, mac OS 12 sed
    expect(main.escapeBefore('[a]')).toBe('\\\\[a\\\\]'); // [ ] => \\[ \\]
    expect(main.escapeAfter('[b]')).toBe('[b]'); // no change
});
test('virtical line', function () {
    // CentOS7 sed, mac OS 12 sed
    expect(main.escapeBefore('a|b|c')).toBe('a|b|c'); // no change
    expect(main.escapeAfter('a|b|c')).toBe('a|b|c'); // no change
});
//# sourceMappingURL=data:application/json;base64,